name: CI

# Controls when the workflow will run
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        id: yarn-cache # use this to check for cache-hit (steps.yarn-cache.outputs.cache-hit != 'true')
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - run: yarn install --frozen-lockfile
      - run: yarn tsc

      - name: Install mkdocs and mkdocs plugins
        run: python -m pip install mkdocs-techdocs-core==0.*
        
      - run: yarn build
        env:
          BASE_URL_BACK_END: ${{ secrets.BASE_URL_BACK_END }}
          BASE_URL: ${{ secrets.BASE_URL }}

      - name: Build e Push no GCP
        id: auth
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_PRODUCTION }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1

      - name: Use gcloud CLI
        run: gcloud info

        # Cache Docker Build
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
        # Build docker image
      - name: Image
        run: |-
          docker image build . -f packages/backend/Dockerfile --tag backstage
      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          gcloud auth configure-docker -q
        # Push image to Google Container Registry
      - name: Build
        run: |-
          docker tag backstage ${{ secrets.GCP_CONTAINER_PRODUCTION }}/${{ secrets.PROJECT_ID_PRODUCTION }}/${{ secrets.GPC_CONTAINER_SERVICE_NAME_PRODUCTION }}
      - name: Build
        run: |-
          docker push ${{ secrets.GCP_CONTAINER_PRODUCTION }}/${{ secrets.PROJECT_ID_PRODUCTION }}/${{ secrets.GPC_CONTAINER_SERVICE_NAME_PRODUCTION }}
     # Push image to Google Cloud Run
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ secrets.GPC_CONTAINER_SERVICE_NAME_PRODUCTION }} \
          --region us-central1 \
          --image gcr.io/${{ secrets.PROJECT_ID_PRODUCTION }}/${{ secrets.GPC_CONTAINER_SERVICE_NAME_PRODUCTION }} \
          --platform managed \
          --allow-unauthenticated \
          --project ${{ secrets.PROJECT_ID_PRODUCTION }}